package sevts.terminal.usbrelay;

import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.IntByReference;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>UsbRelay</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.free.fr/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface UsbRelayLibrary extends Library {
//	public static final String JNA_LIBRARY_NAME = LibraryExtractor.getLibraryPath("UsbRelay", true, usbrelay.UsbRelayLibrary.class);
//	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(JNA_LIBRARY_NAME, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
//	public static final UsbRelayLibrary INSTANCE = (UsbRelayLibrary)Native.loadLibrary(JNA_LIBRARY_NAME, usbrelay.UsbRelayLibrary.class, com.ochafik.lang.jnaerator.runtime.MangledFunctionMapper.DEFAULT_OPTIONS);
	/**
	 * <i>native declaration : usb_relay_device.h:18</i><br>
	 * enum values
	 */
	public static interface usb_relay_device_type {
		/// <i>native declaration : usb_relay_device.h:20</i>
		public static final int USB_RELAY_DEVICE_ONE_CHANNEL = 1;
		/// <i>native declaration : usb_relay_device.h:21</i>
		public static final int USB_RELAY_DEVICE_TWO_CHANNEL = 2;
		/// <i>native declaration : usb_relay_device.h:22</i>
		public static final int USB_RELAY_DEVICE_FOUR_CHANNEL = 4;
		/// <i>native declaration : usb_relay_device.h:23</i>
		public static final int USB_RELAY_DEVICE_EIGHT_CHANNEL = 8;
	};
	/**
	 * init the USB Relay Libary<br>
	 * @returns: This function returns 0 on success and -1 on error.<br>
	 * Original signature : <code>int usb_relay_init()</code><br>
	 * <i>native declaration : usb_relay_device.h:38</i>
	 */
	int usb_relay_init();
	/**
	 * Finalize the USB Relay Libary.<br>
	 * This function frees all of the static data associated with<br>
	 * USB Relay Libary. It should be called at the end of execution to avoid<br>
	 * memory leaks.<br>
	 * @returns:This function returns 0 on success and -1 on error.<br>
	 * Original signature : <code>int usb_relay_exit()</code><br>
	 * <i>native declaration : usb_relay_device.h:46</i>
	 */
	int usb_relay_exit();
	/**
	 * Enumerate the USB Relay Devices.<br>
	 * Original signature : <code>usb_relay_device_info* usb_relay_device_enumerate()</code><br>
	 * <i>native declaration : usb_relay_device.h:50</i>
	 */
	usb_relay_device_info usb_relay_device_enumerate();
	/**
	 * Free an enumeration Linked List<br>
	 * Original signature : <code>void usb_relay_device_free_enumerate(usb_relay_device_info*)</code><br>
	 * <i>native declaration : usb_relay_device.h:54</i>
	 */
	void usb_relay_device_free_enumerate(usb_relay_device_info usb_relay_device_infoPtr1);
	/**
	 * e.g: usb_relay_device_open_with_serial_number("abcde", 5")<br>
	 * Original signature : <code>int usb_relay_device_open_with_serial_number(const char*, unsigned)</code><br>
	 * <i>native declaration : usb_relay_device.h:59</i><br>
	 * @deprecated use the safer methods {@link #usb_relay_device_open_with_serial_number(String, int)} and {@link #usb_relay_device_open_with_serial_number(Pointer, int)} instead
	 */
	@Deprecated
	int usb_relay_device_open_with_serial_number(Pointer serial_number, int len);
	/**
	 * e.g: usb_relay_device_open_with_serial_number("abcde", 5")<br>
	 * Original signature : <code>int usb_relay_device_open_with_serial_number(const char*, unsigned)</code><br>
	 * <i>native declaration : usb_relay_device.h:59</i>
	 */
	Long usb_relay_device_open_with_serial_number(String serial_number, int len);
	/**
	 * open a usb relay device<br>
	 * @return: This funcation returns a valid handle to the device on success or NULL on failure.<br>
	 * Original signature : <code>int usb_relay_device_open(usb_relay_device_info*)</code><br>
	 * <i>native declaration : usb_relay_device.h:64</i>
	 */
	int usb_relay_device_open(usb_relay_device_info device_info);
	/**
	 * close a usb relay device<br>
	 * Original signature : <code>void usb_relay_device_close(int)</code><br>
	 * <i>native declaration : usb_relay_device.h:67</i>
	 */
	void usb_relay_device_close(int hHandle);
	/**
	 * open a relay channel on the USB-Relay-Device<br>
	 * @paramter: index -- which channel your want to open<br>
	 * hHandle -- which usb relay device your want to operate<br>
	 * @returns: 0 -- success; 1 -- error; 2 -- index is outnumber the number of the usb relay device<br>
	 * Original signature : <code>int usb_relay_device_open_one_relay_channel(int, int)</code><br>
	 * <i>native declaration : usb_relay_device.h:74</i>
	 */
	int usb_relay_device_open_one_relay_channel(Long hHandle, int index);
	/**
	 * open all relay channel on the USB-Relay-Device<br>
	 * @paramter: hHandle -- which usb relay device your want to operate<br>
	 * @returns: 0 -- success; 1 -- error<br>
	 * Original signature : <code>int usb_relay_device_open_all_relay_channel(int)</code><br>
	 * <i>native declaration : usb_relay_device.h:80</i>
	 */
	int usb_relay_device_open_all_relay_channel(Long hHandle);
	/**
	 * close a relay channel on the USB-Relay-Device<br>
	 * @paramter: index -- which channel your want to close<br>
	 * hHandle -- which usb relay device your want to operate<br>
	 * @returns: 0 -- success; 1 -- error; 2 -- index is outnumber the number of the usb relay device<br>
	 * Original signature : <code>int usb_relay_device_close_one_relay_channel(int, int)</code><br>
	 * <i>native declaration : usb_relay_device.h:87</i>
	 */
	int usb_relay_device_close_one_relay_channel(Long hHandle, int index);
	/**
	 * close all relay channel on the USB-Relay-Device<br>
	 * @paramter: hHandle -- which usb relay device your want to operate<br>
	 * @returns: 0 -- success; 1 -- error<br>
	 * Original signature : <code>int usb_relay_device_close_all_relay_channel(int)</code><br>
	 * <i>native declaration : usb_relay_device.h:93</i>
	 */
	int usb_relay_device_close_all_relay_channel(int hHandle);
	/**
	 * status bit: High --> Low 0000 0000 0000 0000 0000 0000 0000 0000, one bit indicate a relay status.<br>
	 * the lowest bit 0 indicate relay one status, 1 -- means open status, 0 -- means closed status.<br>
	 * bit 0/1/2/3/4/5/6/7/8 indicate relay 1/2/3/4/5/6/7/8 status<br>
	 * @returns: 0 -- success; 1 -- error<br>
	 * Original signature : <code>int usb_relay_device_get_status(int, unsigned int*)</code><br>
	 * <i>native declaration : usb_relay_device.h:101</i><br>
	 * @deprecated use the safer methods {@link #usb_relay_device_get_status(int, IntBuffer)} and {@link #usb_relay_device_get_status(int, IntByReference)} instead
	 */
	@Deprecated
	int usb_relay_device_get_status(int hHandle, IntByReference status);
	/**
	 * status bit: High --> Low 0000 0000 0000 0000 0000 0000 0000 0000, one bit indicate a relay status.<br>
	 * the lowest bit 0 indicate relay one status, 1 -- means open status, 0 -- means closed status.<br>
	 * bit 0/1/2/3/4/5/6/7/8 indicate relay 1/2/3/4/5/6/7/8 status<br>
	 * @returns: 0 -- success; 1 -- error<br>
	 * Original signature : <code>int usb_relay_device_get_status(int, unsigned int*)</code><br>
	 * <i>native declaration : usb_relay_device.h:101</i>
	 */
	int usb_relay_device_get_status(int hHandle, IntBuffer status);
	/**
	 * Original signature : <code>int usb_relay_device_set_serial(int, char[5])</code><br>
	 * <i>native declaration : usb_relay_device.h:104</i><br>
	 * @deprecated use the safer methods {@link #usb_relay_device_set_serial(int, ByteBuffer)} and {@link #usb_relay_device_set_serial(int, Pointer)} instead
	 */
	@Deprecated
	int usb_relay_device_set_serial(int hHandle, Pointer serial);
	/**
	 * Original signature : <code>int usb_relay_device_set_serial(int, char[5])</code><br>
	 * <i>native declaration : usb_relay_device.h:104</i>
	 */
	int usb_relay_device_set_serial(int hHandle, ByteBuffer serial);
}
